runFilmListQuery :: String -> String -> String -> IO (Result [String])
runFilmListQuery = do


let budgetQueryObject = showJSON (toJSObject [("amount", JSNull), ("currency", showJSON "US$")])
let filmQueryObject = showJSON (toJSObject [("name", JSNull), ("limit", showJSON 5), ("sort", showJSON "-estimated_budget.amount"), ("estimated_budget", budgetQueryObject)]);
  response <- makeQuery $ mkSimpleQuery [("type",showJSON "/film/director"),("id",showJSON JSNull), ("limit",showJSON 2),("film", JSArray [filmQueryObject])]
  
  
mkSimpleQuery [("type",showJSON "/film/director"),("name",showJSON "Peter Jackson"),("film", JSArray [])]


[{
  "limit": 300,
  "id": null,
  "type": "/film/director",
  "film": [{
    "name": null,
    "estimated_budget" : { 
      "amount" : null,
      "currency" : "US$" },
    sort: "-estimated_budget.amount", 
    limit: 5
  }]
  
"{"query":
[{
  "type":"/film/director",
  "id":null,
  "limit":2,
  "film":[{
    "name":null,
	"limit":5,
	"sort":"-estimated_budget.amount",
	"estimated_budget":{
	  "amount":null,
	  "currency":"US$"
	}
  }]
}]}"
}]



GET HEAT
[{
  "id":   null,
  "name": null,
  "type": "/base/popstra/sww_base"
  "heat": null
}]?


GET ACTORS
[{
  "id": null,
  "name": null,
  "/people/person/profession" : [{
    "id": "/en/actor"
  }]
  "type": "/people/person"
}]?